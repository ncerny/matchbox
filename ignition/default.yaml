---
systemd:
    units:
      - name: systemd-timesyncd.service
        enable: true
      - name: locksmithd.service
        mask: true
      - name: update-engine.service
        enable: true
      - name: docker.service
        enable: true
      - name: setup.service
        enable: true
        contents: |
          [Unit]
          Requires=network-online.target
          After=network-online.target
          [Service]
          Environment="PATH=$PATH:/opt/bin:/usr/bin:/bin:/usr/sbin"
          ExecStart=/usr/bin/sh -c 'sleep 20 && /opt/bin/setup.sh'
          Restart=on-failure
          [Install]
          WantedBy=multi-user.target
storage:
  directories:
    - path: /etc/kubernetes/manifests
      filesystem: root
      mode: 0700
  files:
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline:
          k8s-{{.request.query.role}}-{{.request.query.mac}}
    - path: /etc/default/kubelet
      filesystem: root
      mode: 0644
      contents:
        inline:
          KUBELET_EXTRA_ARGS="--volume-plugin-dir=/var/lib/kubelet/volumeplugins"
    - path: /opt/consul/services/kubernetes.json
      filesystem: root
      mode: 0600
      contents:
        inline: |
          {
            "service": {
              "name": "kubernetes",
              "address": "",
              "port": 6443,
              "enable_tag_override": false,
              "checks": [
                {
                  "id": "kube-apiserver",
                  "name": "Kubernetes API Server",
                  "http": "https://localhost:6443/healthz",
                  "tls_skip_verify": true,
                  "method": "GET",
                  "interval": "10s",
                  "timeout": "1s"
                }
              ],
              "weights": {
                "passing": 3,
                "warning": 1
              }
            }
          }
    - path: /opt/consul/services/matchbox.json
      filesystem: root
      mode: 0600
      contents:
        inline: |
          {
            "service": {
              "name": "matchbox",
              "address": "",
              "port": 8080,
              "enable_tag_override": false,
              "checks": [
                {
                  "id": "api",
                  "name": "Matchbox REST API",
                  "http": "http://localhost:8080/",
                  "method": "GET",
                  "interval": "10s",
                  "timeout": "1s"
                }
              ],
              "weights": {
                "passing": 3,
                "warning": 1
              }
            }
          }
    - path: /opt/bin/setup.sh
      filesystem: root
      mode: 0700
      contents:
        inline: |
          #!/bin/bash

          export CONSUL_VERSION="1.4.0"
          export CNI_VERSION="v0.7.4"
          export CRICTL_VERSION="v1.13.0"
          export KUBERNETES_VERSION="v1.13.1"

          export DOMAIN="{{.request.query.domain}}"
          export ROLE="{{.request.query.role}}"
          export DATACENTER=${DOMAIN%%.*}

          export my_iface=$(ip route show | awk '/default via / {print $5}')
          export my_cidr=$(ip a show dev $my_iface primary scope global | awk '/inet / { print $2 }')
          export my_ip=${my_cidr%%/*}
          export my_hostname=$(hostname)

          main() {
            echo 127.0.1.1  $(hostname).${DOMAIN} $(hostname) >> /etc/hosts
            case ${ROLE} in
              utility)
                mkdir -p /etc/consul.d
                cp /opt/consul/services/matchbox.json /etc/consul.d/
                install_consul "-server -ui -bootstrap-expect=3 -client=0.0.0.0 -join-wan=consul.service.management.consul"
                install_dnsmasq
                install_matchbox
                ;;
              master)
                mkdir -p /etc/consul.d
                cp /opt/consul/services/kubernetes.json /etc/consul.d/
                install_consul
                install_kubernetes
                initial_cluster=$(/opt/bin/consul lock kubernetes-master /opt/bin/consul kv get -datacenter ${DATACENTER} kubernetes/cluster)
                if [[ -z "$initial_cluster" ]]; then
                  k8s_bootstrap
                else
                  k8s_master
                fi
                ;;
              *)
                install_consul
                install_kubernetes
                k8s_member
                ;;
            esac
            systemctl disable setup.service
          }
          kv_put() {
            key=${1}
            value=${2}
            if [[ -z "${key}" ]] || [[ -z "${value}" ]]; then
              echo "Both a key and a value should be specified for kv_put"
              return 1
            else
              /opt/bin/consul kv put -datacenter ${DATACENTER} ${key} "${value}"
            fi
          }
          kv_get() {
            key=${1}
            value=${2}
            if [[ -z "${key}" ]] || [[ -n "${value}" ]]; then
              echo "Only a key should be specified for kv_get"
              return 1
            else
              /opt/bin/consul kv get -datacenter ${DATACENTER} ${key}
            fi
          }
          rcp() {
            kv_get kubernetes/bootstrap/key > provisioner && chmod 600 provisioner
            files=($@)
            ssh_opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i provisioner"
            for file in ${files[@]}; do
              echo "Copying ${file}..."
              scp ${ssh_opts} root@kubernetes.service.${DATACENTER}.consul:${file} ${file} 2>/dev/null
            done
            rm provisioner
          }
          rsh() {
            kv_get kubernetes/bootstrap/key > provisioner && chmod 600 provisioner
            command=${1}
            ssh_opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i provisioner"
            echo "Remotely executing '${command}'..."
            echo $(ssh $ssh_opts root@kubernetes.service.${DATACENTER}.consul -C "${command}") 2>/dev/null
            rm provisioner
          }
          install_consul() {
            args=$@
            if [[ -z "$args" ]]; then
              args="-retry-join=consul.service.${DATACENTER}.consul"
            fi
            mkdir -p /var/lib/consul
            mkdir -p /etc/consul.d
            curl --retry 10 --fail https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip | gunzip - > /opt/bin/consul
            chmod +x /opt/bin/consul
            cat <<EOF >/etc/systemd/system/consul.service
          [Service]
          ExecStart=/opt/bin/consul agent $args \\
            -data-dir=/var/lib/consul \\
            -enable-script-checks=true \\
            -config-dir=/etc/consul.d \\
            -retry-join=consul.service.consul \\
            -enable-script-checks=true \\
            -datacenter=${DATACENTER} \\
            -bind='{{`{{ GetInterfaceIP "eth0" }}`}}'
          Restart=always
          [Unit]
          Description=Consul Agent
          Requires=network-online.target
          After=network-online.target
          [Install]
          WantedBy=multi-user.target
          EOF
            systemctl daemon-reload
            systemctl enable consul.service
            systemctl start consul.service
          }
          install_matchbox() {
            case "${DATACENTER}" in
              union)
                channel="unstable"
                ;;
              rehearsal)
                channel="stable"
                ;;
              delivered)
                channel="delivered"
                ;;
              *)
                channel="unstable"
                ;;
              esac
            cat <<EOF >/etc/systemd/system/matchbox.service
          [Service]
          ExecStartPre=-/usr/bin/docker rm matchbox
          ExecStart=/usr/bin/docker run \\
            --name matchbox \\
            -p 8080:8080 \\
            -p 8081:8081 \\
            ncerny/matchbox \\
            --strategy=at-once \\
            --channel=${channel}
          ExecStop=/usr/bin/docker stop matchbox
          Restart=always
          [Unit]
          Description=Matchbox Ignition Provider
          Requires=docker.service
          After=docker.service
          [Install]
          WantedBy=multi-user.target
          EOF
            systemctl daemon-reload
            systemctl enable matchbox.service
            systemctl start matchbox.service
          }
          install_dnsmasq() {
            router=$(ip route show | awk '/default via / {print $3}')
            cat <<EOF >/etc/systemd/system/dnsmasq.service
          [Service]
          ExecStartPre=-/usr/bin/docker rm dnsmasq
          ExecStart=/usr/bin/docker run --net=host \\
            --name dnsmasq \\
            --cap-add=NET_ADMIN \\
            quay.io/coreos/dnsmasq \\
            -d -q \\
            --no-poll \\
            --no-resolv \\
            --no-hosts \\
            --local-service \\
            --dhcp-range=${router},proxy,255.255.255.0 \\
            --enable-tftp --tftp-root=/var/lib/tftpboot \\
            --dhcp-userclass=set:ipxe,iPXE \\
            --pxe-service=tag:#ipxe,x86PC,"PXE chainload to iPXE",undionly.kpxe \\
            --pxe-service=tag:ipxe,x86PC,"iPXE",http://matchbox.service.${DATACENTER}.consul:8080/boot.ipxe \\
            --server=/consul/127.0.0.1#8600 \\
            --server=${router} \\
            --log-dhcp
          ExecStop=/usr/bin/docker stop dnsmasq
          Restart=always
          [Unit]
          Description=Matchbox Ignition Provider
          Requires=docker.service
          After=docker.service
          [Install]
          WantedBy=multi-user.target
          EOF
            systemctl daemon-reload
            systemctl enable dnsmasq.service
            systemctl start dnsmasq.service
          }
          install_kubernetes() {
            mkdir -p /opt/cni/bin
            curl --retry 10 --fail -L "https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-amd64-${CNI_VERSION}.tgz" | tar -C /opt/cni/bin -xz
            curl --retry 10 --fail -L "https://github.com/kubernetes-incubator/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-amd64.tar.gz" | tar -C /opt/bin -xz
            curl --retry 10 --fail -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/{kubeadm,kubelet,kubectl}
            chmod +x {kubeadm,kubelet,kubectl}
            mv {kubeadm,kubelet,kubectl} /opt/bin/
            curl --retry 10 --fail -sSL "https://raw.githubusercontent.com/kubernetes/kubernetes/${KUBERNETES_VERSION}/build/debs/kubelet.service" | sed 's:/usr/bin:/opt/bin:g' > /etc/systemd/system/kubelet.service
            mkdir -p /etc/systemd/system/kubelet.service.d
            curl --retry 10 --fail -sSL "https://raw.githubusercontent.com/kubernetes/kubernetes/${KUBERNETES_VERSION}/build/debs/10-kubeadm.conf" | sed 's:/usr/bin:/opt/bin:g' > /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
            mkdir -p /var/lib/kubelet/volumeplugins
            systemctl enable kubelet.service
            systemctl start kubelet.service
          }
          k8s_bootstrap() {
            ssh-keygen -t rsa -N '' -f provisioner
            mkdir -p /root/.ssh
            cat provisioner.pub > /root/.ssh/authorized_keys
            kv_put kubernetes/bootstrap/key "$(cat provisioner)"
            kv_put kubernetes/bootstrap/key_pub "$(cat provisioner.pub)"
            cat <<EOF > kubeadm-config.yaml
          apiVersion: kubeadm.k8s.io/v1beta1
          kind: ClusterConfiguration
          kubernetesVersion: ${KUBERNETES_VERSION}
          apiServer:
            certSANs:
            - "kubernetes.service.${DATACENTER}.consul"
          controlPlaneEndpoint: "kubernetes.service.${DATACENTER}.consul:6443"
          EOF
            /opt/bin/kubeadm init --config kubeadm-config.yaml
            k8s_wait_api_server_health localhost
            k8s_setup_kubectl
            k8s_versions
          }
          k8s_master() {
            k8s_wait_api_server_health
            mkdir -p /root/.ssh
            kv_get kubernetes/bootstrap/key_pub > /root/.ssh/authorized_keys
            files=(
              /etc/kubernetes/pki/ca.crt
              /etc/kubernetes/pki/ca.key
              /etc/kubernetes/pki/sa.key
              /etc/kubernetes/pki/sa.pub
              /etc/kubernetes/pki/front-proxy-ca.crt
              /etc/kubernetes/pki/front-proxy-ca.key
              /etc/kubernetes/pki/etcd/ca.crt
              /etc/kubernetes/pki/etcd/ca.key
              /etc/kubernetes/admin.conf
            )
            rcp ${files[@]}
            # id=$(etcd_exec member list | awk -F: "/${my_hostname}/ { print \$1 }")
            # if [[ -n "$id" ]]; then
            #   etcd_exec member remove $id
            # fi
            k8s_join --experimental-control-plane
            k8s_wait_api_server_health localhost
            k8s_setup_kubectl
            k8s_versions
          }
          k8s_member() {
            k8s_wait_api_server_health
            k8s_join
            if [[ "${ROLE}" == "storage" ]]; then k8s_tag storage; fi
          }
          k8s_wait_api_server_health() {
            if [[ -z "$1" ]]; then
              target="kubernetes.service.${DATACENTER}.consul"
            else
              target="$1"
            fi
            while [[ $(/usr/bin/curl -k https://${target}:6443/healthz 2>/dev/null) != "ok" ]]; do
              echo "API Server not yet healthy."
              sleep 10
            done
          }
          # k8s_wait_master_health() {
          #   while [[ ! $(/usr/bin/curl http://127.0.0.1:8500/v1/query/kubernetes/execute 2>/dev/null | jq -e .Nodes[0].Node.Node) ]] &&
          #         [[ ! $(/usr/bin/curl http://127.0.0.1:8500/v1/query/kubernetes/execute 2>/dev/null| jq -e .Nodes[0].Node.Address) ]]; do
          #     echo "No healthy master nodes!"
          #     sleep 10
          #   done
          # }
          # etcd_exec() {
          #   export KUBECONFIG=/etc/kubernetes/admin.conf
          #   k8s_wait_master_health
          #   master_name=$(/usr/bin/curl http://127.0.0.1:8500/v1/query/kubernetes/execute 2>/dev/null | jq -r .Nodes[0].Node.Node)
          #   master_ip=$(/usr/bin/curl http://127.0.0.1:8500/v1/query/kubernetes/execute 2>/dev/null| jq -r .Nodes[0].Node.Address)
          #   /opt/bin/kubectl exec -n kube-system etcd-${master_name} -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://${master_ip}:2379 $@
          # }
          k8s_join() {
            kubeadm_join=
            while [[ -z "${kubeadm_join}" ]]; do
              kubeadm_join=$(rsh '/opt/bin/kubeadm token create --print-join-command')
              if [[ -z "${kubeadm_join}" ]]; then
                echo "Error getting bootstrap token from master..." > 2
                sleep 10
              fi
            done
            /opt/bin/${kubeadm_join} $@
          }
          k8s_setup_kubectl() {
            mkdir /home/core/.kube
            cp -i /etc/kubernetes/admin.conf /home/core/.kube/config
            chown $(id -u core):$(id -g core) -R /home/core/.kube
          }
          k8s_tag() {
            while [[ ! $(rsh "/opt/bin/kubectl --kubeconfig=/etc/kubernetes/admin.conf label node/$(hostname) node-role.kubernetes.io/${1}=") ]]; do
              sleep 30
            done
            while [[ ! $(rsh "/opt/bin/kubectl --kubeconfig=/etc/kubernetes/admin.conf taint node/$(hostname) ${1}=value:NoSchedule") ]]; do
              sleep 30
            done
          }
          k8s_versions() {
            kv_put versions/consul "${CONSUL_VERSION}"
            kv_put versions/cni-plugins "${CNI_VERSION}"
            kv_put versions/cri-tools "${CRICTL_VERSION}"
            kv_put versions/kubernetes "${KUBERNETES_VERSION}"
          }
          main
networkd:
  units:
    - name: 20-eth0.network
      contents: |
        [Match]
        Name=eth0
        [Network]
        DHCP=true
passwd:
  users:
    {{ if index . "ssh_authorized_keys" }}
    - name: core
      ssh_authorized_keys:
        {{ range $element := .ssh_authorized_keys }}
        - {{$element}}
        {{end}}
    {{end}}
